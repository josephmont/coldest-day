import
edu.duke.*;
import 
org.apache.commons.csv.*;
import
java.io.*;
/**
 * Write a description of class Coldest_Day here.
 *
 * @author (Toi'Re Anderson)
 * @version (a version number or a date)
 */
public class Coldest_Day
{
  public CSVRecord coldestHourInFile(CSVParser parser){
      CSVRecord smallestSoFar = null;
      for(CSVRecord currentRow : parser)
      {
        if(smallestSoFar == null)
        {
         smallestSoFar = currentRow;   
        }
        else
        {
         double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
         double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
         if(currentTemp == -9999)
         {
             continue;
            }
         if(currentTemp < smallestTemp)
         {
             smallestSoFar = currentRow;
            }
        }
        }
        return smallestSoFar;
    }
  public void testColdestHourInFile()
    {
        FileResource fileEval = new FileResource();
        CSVParser parser = fileEval.getCSVParser();
        CSVRecord smallest = coldestHourInFile(parser);
        System.out.println(smallest);
    }
  public CSVRecord lowestHumidityInFile(CSVParser parser)
  {
     CSVRecord lowestHumiditySoFar = null;
     for(CSVRecord currentRow : parser)
     {
         if(lowestHumiditySoFar == null)
         {
           lowestHumiditySoFar = currentRow;    
            }
            else
            {
             if(currentRow.get("Humidity").equals("N/A"))
             {
               continue;
                }
             double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
             double lowestHumidity = Double.parseDouble(lowestHumiditySoFar.get("Humidity"));
             if(currentHumidity < lowestHumidity)
             {
                 lowestHumiditySoFar = currentRow;
                }
            }
        }
     return lowestHumiditySoFar;
    }
  public void testLowestHumidity()
  {
     FileResource fr = new FileResource();
     CSVParser parser = fr.getCSVParser();
     CSVRecord lowest = lowestHumidityInFile(parser);
     System.out.println("lowest humidity was" + lowest);
    }
  public CSVRecord lowestHumidityInManyDays()
  {
     CSVRecord lowestSoFar = null;
     DirectoryResource dr = new DirectoryResource();
     for(File f : dr.selectedFiles())
     {
         FileResource fr = new FileResource(f);
         CSVRecord currentRow = lowestHumidityInFile(fr.getCSVParser());
         if(lowestSoFar == null)
         {
             lowestSoFar = currentRow;
            }
         if(currentRow.get("Humidity").equals("N/A"))
         {
             continue;
            }
         else
         {
             double currentHumidity = Double.parseDouble(currentRow.get("Humidity"));
             double lowestHumidity = Double.parseDouble(lowestSoFar.get("Humidity"));
             if(currentHumidity < lowestHumidity)
             {
                 lowestSoFar = currentRow;
                }
            }
        }
     return lowestSoFar;
    }
  public void testLowestHumidityManyDays()
  {
     CSVRecord lowest = lowestHumidityInManyDays();
     System.out.println("lowest humidity was" + lowest);
    }
  public CSVRecord hottestInManyDays()
  {
     CSVRecord largestSoFar = null;
     DirectoryResource dr = new DirectoryResource();
     for(File f : dr.selectedFiles())
     {
         FileResource fr = new FileResource(f);
         CSVRecord currentRow = hottestHourInFile(fr.getCSVParser());
         if(largestSoFar == null)
         {
             largestSoFar = currentRow;
            }
         else
         {
             double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
             double largestTemp = Double.parseDouble(largestSoFar.get("TemperatureF"));
             if(currentTemp > largestTemp)
             {
                 largestSoFar = currentRow;
                }
            }
        }
     return largestSoFar;
    }
  public CSVRecord fileWithColdestTemperature()
  {
      CSVRecord smallestSoFar = null;
      DirectoryResource dr = new DirectoryResource();
      String file = "";
      for(File f : dr.selectedFiles())
      {
          FileResource fr = new FileResource(f);
          CSVRecord currentRow = coldestHourInFile(fr.getCSVParser());
          if(smallestSoFar == null)
          {
             smallestSoFar = currentRow;
             file = f.getAbsolutePath();
            }else
            if(smallestSoFar.equals("-9999"))
            {
             continue;   
            }
          {
             double currentTemp = Double.parseDouble(currentRow.get("Temperature"));
             double smallestTemp = Double.parseDouble(smallestSoFar.get("TemperatureF"));
             if(currentTemp < smallestTemp)
             {
                 smallestSoFar = currentRow;
                 file = f.getAbsolutePath();
                }
          }
        }
        System.out.println(file);
        return smallestSoFar;
    }
  public void testFileWithColdestTemperature()
  {
     CSVRecord coldest = fileWithColdestTemperature();
     System.out.println(coldest);
    }
  public double averageTemperature(CSVParser parser)
  {
     double averageTemp;
     double sum = 0;
     int counter = 0;
     for(CSVRecord record : parser)
     {
         sum += Double.parseDouble(record.get("TemperatureF"));
         counter++;
        }
     averageTemp = sum/counter;
     return averageTemp;
    }
  public void testAverageTemp()
  {
     FileResource fr = new FileResource();
     CSVParser parser = fr.getCSVParser();
     double average = averageTemperature(parser);
     System.out.println(average);
    }
  public static double averageTemperatureWithHighHumidityInFile(CSVParser parser, double level)
  {
     double averageTemp;
     double sum = 0;
     int counter = 0;
     for(CSVRecord record : parser)
     {
     double humidity = Double.parseDouble(record.get("Humidity"));
     if(humidity >= level)
     {
         sum += Double.parseDouble(record.get("TemperatureF"));
         counter ++;
        }
        }
     averageTemp = sum/counter;
     return averageTemp;
    }
  public void testAverageTempWHumidity()
  {
     FileResource fr = new FileResource();
     CSVParser parser = fr.getCSVParser();
     double averageTempHumidity = averageTemperatureWithHighHumidityInFile(parser, 80);
     System.out.println("avg temp was" + averageTempHumidity);
    }
  public void testHottestInday()
  {
     FileResource fr = new FileResource();
     CSVRecord largest = hottestHourInFile(fr.getCSVParser());
     System.out.println("hottest temperature was " + largest.get("TemperatureF")+ "at" + largest.get("TimeEDT"));
    }
  public void testColdestInDay()
  {
     FileResource fr = new FileResource();
     CSVRecord smallest = coldestHourInFile(fr.getCSVParser());
     System.out.println("coldest temperature was " + smallest.get("TemperatureF") + "at" + smallest.get("TimeEDT"));
    }
  public void testHottestInManyDays()
  {
     CSVRecord largest = hottestInManyDays();
     System.out.println("Hottest temperature was" + largest.get("TemperatureF") + "at" + largest.get("DateUTC"));
    }
  public void testAvgTempWHumidity()
  {
     FileResource fr = new FileResource();
     CSVParser parser = fr.getCSVParser();
     double avgTempHumidity = averageTemperatureWithHighHumidityInFile(parser, 80);
     System.out.println("Average temperature when the humidity was > or = the amount that you input is" + avgTempHumidity);
    }
  public CSVRecord hottestHourInFile(CSVParser parser)
  {
     CSVRecord largestSoFar = null;
     for(CSVRecord currentRow : parser)
     {
         if(largestSoFar == null)
         {
             largestSoFar = currentRow;
            }
         else
         {
             double currentTemp = Double.parseDouble(currentRow.get("TemperatureF"));
             double largestTemp = Double.parseDouble(largestSoFar.get("TemperatureF"));
             if(currentTemp > largestTemp)
             {
                 largestSoFar = currentRow;
                }
            }
        }
     return largestSoFar;
    }
}
